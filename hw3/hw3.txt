//Many of my answers in 2 and 3 include sigma notations.
//When I refer to some index of i, I am referring to a sigma notation.

Problem 2
(a)
Answer : Θ(n^2)

Explanation : there are two nested for loops inside a for loop.
We will examine each one. The first nested for loop pushes from 
j=i to j=n-1, which is equal to Θ(n-i). Then, the second nested
for loop pops from n to i+1, which is basically popping everything
from the first loop. The second for loop, therefore, also has a 
runtime of Θ(n-i). Then, both loop (Θ(n-i)) runs from i=0 to
i=n-1, so that makes each loop with a runtime of Θ(n^2) according
to the arithmetic sum. Since we have two separate blocks of code,
we add them up to get the total runtime which is Θ(n^2)+Θ(n^2)
= Θ(n^2). The while loop gets never run because the stack 
always is empty when it gets to the while loop.

(b)
Answer : Θ(n^2)

Explanation : When you draw the recursion tree,
you can see that the recursion makes (n-1)+(n-2)+(n-3)+...
+1 function calls, which is equal to the arithmetic sum of n.
Therefore, it is equal to Θ(n^2).

(c)
Answer : Θ(n)

Explanation : The first for loop runs in Θ(n) because 
it iterates from i=1 to i=n. Then, when we enter the
while loop, we see a for loop inside an if statement.
By tracing the code, we can find out that the if(q.front()==1)
is true only once, therefore the inside for loop will be run
only once. The while loop runs n times through the queue, 
so adding all three blocks of code, we get n+n+n=3n, which is Θ(n).


(d)
Answer : Θ(n^2logn)

Explanation :The first for loop is inserting a 
node at the front of a linked list from i=0 to i=n-1, 
so the first for loop's runtime is Θ(n).
Assuming that all values of arr are 0s, the innermost for
loop will be run n/i times, depending on the value of the
loop's index.
n
Σ(1/i)
i=1
Doing the sigma notation, we find out that
the runtime of the innermost for loop is logn. Calculating
the outer while and for loop we get, n^2logn.

Problem 3
(a)
Answer : Θ(n^2logn)

Explanation : The worst case sequence of n somefunc calls
starts when n=0 and max=1. Bar takes Θ(n^2) and
foo takes Θ(logn) time. For n sequences, foo runs from
i=1 to i=n-logn, so its total runtime becomes
logn*(n-logn) = nlogn-(logn)^2. Then, Bar runs from
i=1 to i=logn, so its total runtime becomes n^2logn.
Adding the two functions' runtime, we get nlogn-(logn)^2
+n^2logn, which is Θ(n^2logn).

(b)
Answer : Θ(nlogn)

Explanation : Amortized runtime is looking for worst
case average case runtime, so we need to divide (a)'s 
answer by n to get the amortized runtime when Bar 
takes Θ(n^2) and foo takes Θ(logn) time. Therfore,
(n^2logn)/n = nlogn.

(c)
Answer : Θ(nlogn)

Explanation : Bar takes Θ(n^2) and foo takes Θ(nlogn).
For n sequences, foo runs from i=1 to i=n-logn, so its 
total runtime is nlogn*(n-logn) = n^2logn-n(logn)^2.
Then, bar runs from i=1 to i=logn, so its total runtime
is n^2logn. 
Adding the two functions' runtime, we get n^2logn-(logn)^2
+n^2logn, which is Θ(n^2logn). 
To get the amortized runtime, we just divide Θ(n^2logn) by n,
which is Θ(nlogn).

(d)
Answer : 
Worst-case sequence of calls for somefunc :
n=0 and max=1
Worst-case sequence of calls for anotherfunc:
n=negative infinity and max = positive infinity
Amortized runtime for somefunc:
Θ(nlogn)
Amortized runtime for anotherfunc:
Θ(n^2)

Explanation :
Bar runs Θ(n^2) and foo runs (logn).
For worst-case sequence of calls for somefunc,
bar gets called the most when n=0 and max=1.
For worst-case sequence of calls for anotherfunc,
bar gets called the most when n=INT_MIN and
max = INT_MAX

For amortized runtime for somefunc, using the answer
from b, we divide n^2logn by n, so we get Θ(nlogn).

For amortized runtime for anotherfunc, 
if (this->n > 0) is always false and
if(this->n < (this->max)/2) is always true
when n=INT_MIN and max=INT_MAX, so bar gets run
everytime. For n calls, bar runs n times, so
the total runtime becomes n^3. To get the amortized
runtime, we divide n^3 by n, so we get Θ(n^2).