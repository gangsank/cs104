1c.
An array of size of 10 of doubles in order of 
(1.0,3.0,5.0,7.0,2.0,4.0,6.0,8.0,9.0,10.0).
In each quicksort call, the second smallest number
in the subset will be the pivot. 
After each quicksort, the left side will be sorted,
so we only have to worry about the right side and
it will use the second smallest number as the pivot
each time.

2.
Let's call the array A
desiredidx = ((end-start)/(A[end]-A[start]))*(target-A[start]) + startidx. 
In order to make interpolation search's runtime linear, 
we can assign a really big number on last index of the array. 
Then, the desiredidx will always be equal to startidx because 
the denominator of the fraction is too big and make it 0. 
The variable startidx will be incremented each recursion call, 
so the search will query all elements of the array to find the target.

3.
Part a
(1)
Assuming that the array is not sorted, the insertion sort
takes O(n^2). Linear search and the partition function
both takes linear time, Θ(n). Finally, all other statements
excluding the recursion in the program takes constant time.

(2)
The input size for each recursive call is 5.
Each recursive call to quantile() takes constant time, Θ(1).
The recursive calls are made n/5 times.
Multiplying the number of times to the runtime of each call
for the runtime of the for lopp, we get n/5*Θ(1) = Θ(n/5) = Θ(n).

(3)
In the recursive call that assigns a value to pivot,
the size of the array is n/5. Therefore, the recursive call
takes T(n/5).

(4)
The pivot is the median of medians. Then, we know that since 
the pivot is the median of the array of medians, there has
to be at least (n/5)/2 elements that are less than or equal 
to the pivot, which translates to 2 elements. Therefore, 
there are at least n/10+2n/10 = 3n/10 elements in the 
array that are less than the pivot.
The same, but opposite, logic applies to the number of
elements that are bigger than the pivot. Therefore, there
are at least 3n/10 elements that are bigger than the pivot.

(5)
If the pivot is not what we are looking for, we either
make the recursive call for the left or the right subarray,
depending on the situation. We know that there are 3n/10
elements that are less than or equal to the pivot and 3n/10
elements that are greater than or equal to the pivot.
Therefore, the maximum size of the array in the recursive
call is n-(3n/10) = 7n/10.

(6)
Putting everything together, now we know that 
T(n) = T(n/5)+T(7n/10)+Θ(n), n >= 10. 
T(n/5) comes from the recursive call that assings a value
to pivot.
T(7n/10) comes from the recursive call in the last line.
Θ(n) comes from the for loop.
The base case is when n<10, T(n)=Θ(1) because sorting
and looking up through a small array is fast.

Part b
(1),(3)                                                       
                            n                                          
                 /                        \
                n/5                      7n/10                       
         /            \             /              \
      n/25            7n/50        7n/50          49n/100
  /        \        /       \    /      \         /       \
n/125    7n/250   7n/250 49n/500 7n/250  49n/500  49n/500  343n/1000

(2)
For the top node in the 0th layer, runtime = O(n)
For each node in the 1st layer, runtime = O(81n/100)
For each node in the 2nd layer, runtime = O(729n/1000)

(4)
(9/10)^i * n where i starts from 0.

(5) There are (log base of 9/10) n layers.

(6)
log base of 9/10 n
n*Σ(9/10)^i 
  i=0
= O(n) because (9/10)<1, so it becomes constant,
and the only thing remaining is n.
which makes the equation equal to O(n).